
git is like which tracks  changes content in files

restority. files and folder stored in one place. if any changes it tracks

git is like making changes only locally,no internet needed
github is like repostritory hosting service,to take backup of your files. mainly used distrubuted teams.

git init(on empty directory)

git objects(it stores the  hash values(objects)
git uses key value data store

Ans. "git init" creates an empty repository or can make an existing directory a git repository while
"git clone" first internally calls "git init" to create an empty git repository and then copy the data from the specified remote repository

===========================================================================================

33. What is merge conflict in GIT?
A merge conflict in GIT is the result of merging two commits.
Sometimes the commit to be merged and current commit have changes in same location. In this
scenario, GIT is not able to decide which change is more important. Due to this GIT reports a merge
conflict. It means merge is not successful. We may have to manually check and resolve the merge
conflict.


git push,fech,clone

git clone <repo?
git pull origin master
git add/remote files
git add .
git commit -m "your message"
git push origin master

#delete some files/folder and git pull again contnet is not updated



git fetch is the command that tells your local git to retrieve the latest meta-data info from the original 
(yet doesn't do any file transferring. It's more like just checking to see if there are any changes available

git pull says "bring the changes in the remote repository to where I keep my own code."

Normally git pull does this by doing a git fetch to bring the local copy of the remote repository up to date, 
and then merging the changes into your own code repository and possibly your working copy.
In the simplest terms, git pull does a git fetch followed by a git merge.

https://www.w3schools.com/git/git_exercises.asp?remote=github

examples:
https://www.w3schools.com/git/git_pull_from_remote.asp?remote=github

===========================================================================================
Branches
Note: branch -r is for remote branches only.
 So we can use the -a option to see all local and remote branches:



…or create a new repository on the command line


echo "# git_p" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/ravikiran300/git_p.git
git push -u origin main

…or push an existing repository from the command line
git remote add origin https://github.com/ravikiran300/git_p.git
git branch -M main
git push -u origin main



============================================================================
git merge
-----------

create a file a master and feauture branch.
merge it to feature branch

create a file a master and feauture branch.
rebase from feature to master branch.

https://www.youtube.com/watch?v=KWAZl2QHC44

https://www.geeksforgeeks.org/git-difference-between-merging-and-rebasing/

git merge
Git merge is a command that allows you to merge branches from Git. Git rebase is a command that allows developers to integrate changes from one branch to another
All the commits on the feature branch will be combined as a single commit in the master branch.

git Rebase
All the commits will be rebased and the same number of commits will be added to the master branch.

git merge
- Is a non-destructive operation
- Existing branches are not changed in any way
- Creates a new merge commit in the feature branch

git rebase
Rebasing is the process of moving a branch to a new base commit.
- Moves the entire feature branch to begin on the tip of the master branch
- Re-writes the project history
- We get much cleaner and linear project history



   1)Merge takes all the changes in one branch and merges them into another branch in one commit.
   2)Rebase says I want the point at which I branched to move to a new starting point

So when do you use either one?
Merge

    Let's say you have created a branch for the purpose of developing a single feature. When you want to bring those changes back to master, you probably want merge (you don't care about maintaining all of the interim commits).

Rebase

    A second scenario would be if you started doing some development and then another developer made an unrelated change. You probably want to pull and then rebase to base your changes from the current version from the repository.


=========================================================================================

 GitHub Merge and Merge conflicts 
 ====================================
 
 https://www.youtube.com/watch?v=nDRWhKc5Yd4
 
 any changes u need to hostingwebsite github
 
 git push origin master
 git push origin main
 next type username and password
 
 https://medium.com/@mshalam04/how-to-resolve-merge-conflicts-in-github-f4d9d0da403d
 https://medium.com/@RedRoxProjects/how-do-i-git-three-ways-to-solve-a-merge-conflict-cde4d7924c80
 https://levelup.gitconnected.com/learn-github-pr-merge-conflicts-in-seconds-bf301232d0cf
 
 ===========================================================================================
 
 
git pull and fetch
===================

https://medium.com/@knoldus/features-of-git-fetch-and-git-pull-command-4ba787ec9a30

=================================================================================================

git-fast-forward-merge-vs-three-way-merge
=============================================

https://medium.com/@koteswar.meesala/git-fast-forward-merge-vs-three-way-merge-8591434dd350 

https://medium.com/@paritosh90/git-internals-merge-2fe923d0c0c6
 
 
 
 
 
 ==========================================================
 
 
 42. What is the main difference between git clone and git remote?
The main difference between git clone and git remote is that git clone is used to create a new local
repository whereas git remote is used in an existing repository.
git remote adds a new reference to existing remote repository for tracking further changes.
git clone creates a new local repository by copying another repository from a URL.



git log --oneline
git show commitid
git checkout commitid(to commitid how project is?)


i have master branch i did base commmint 


revert:
undo the changes

git revert commitid

git reset(soft,hard,mixed)
default(mixed)
git reset --mixed pervious commitid(it comes to unstaged env,content wont delete)
git checkout . (it will clear the content)

git reset --soft previous commitid                    (come to staged,content wont delete
git checkout . (comes to unstaged)
git checkout .(delete content one by one)

git  --hard commitid 

===========================================

create files and commit

git remote add origin urlofprojct

git push origin master

git pull origin master
git push origin master

to avoid typing git pull origin master

we can set upstream

git branch --set-upstream-to=origin/master

now u can ( git pull ) directly

git commit -am "message"
adding and commited modified old files(work only on old files)


go to master and merge it
git merge branchname


if no conflct merge is forward forward merge


============================

===========================

git branches and merges
========
git branch
git branch features1
git checkout feauture1
git log --oneline 

create branch and checkout to branch
git checkout -b feature2

git checkout -D feauture1


testing merge

create feautue branch and commit a file

===================================
