
git is like which tracks  changes content in files

restority. files and folder stored in one place. if any changes it tracks

git is like making changes only locally,no internet needed
github is like repostritory hosting service,to take backup of your files. mainly used distrubuted teams.

git init(on empty directory)

git objects(it stores the  hash values(objects)
git uses key value data store

============================================================================
git merge
-----------

create a file a master and feauture branch.
merge it to feature branch

create a file a master and feauture branch.
rebase from feature to master branch.

https://www.youtube.com/watch?v=KWAZl2QHC44


git merge
- Is a non-destructive operation
- Existing branches are not changed in any way
- Creates a new merge commit in the feature branch

git rebase
- Moves the entire feature branch to begin on the tip of the master branch
- Re-writes the project history
- We get much cleaner and linear project history

=========================================================================================

 GitHub Merge and Merge conflicts 
 ====================================
 
 
 
 
 
 
 
 
 
 ==========================================================



git log --oneline
git show commitid
git checkout commitid(to commitid how project is?)


i have master branch i did base commmint 


revert:
undo the changes

git revert commitid

git reset(soft,hard,mixed)
default(mixed)
git reset --mixed pervious commitid(it comes to unstaged env,content wont delete)
git checkout . (it will clear the content)

git reset --soft previous commitid                    (come to staged,content wont delete
git checkout . (comes to unstaged)
git checkout .(delete content one by one)

git  --hard commitid 

===========================================

create files and commit

git remote add origin urlofprojct

git push origin master

git pull origin master
git push origin master

to avoid typing git pull origin master

we can set upstream

git branch --set-upstream-to=origin/master

now u can ( git pull ) directly

git commit -am "message"
adding and commited modified old files(work only on old files)


go to master and merge it
git merge branchname


if no conflct merge is forward forward merge


============================

===========================

git branches and merges
========
git branch
git branch features1
git checkout feauture1
git log --oneline 

create branch and checkout to branch
git checkout -b feature2

git checkout -D feauture1


testing merge

create feautue branch and commit a file

===================================


Threeway merge and fast forword merge
common merge conflits
git pull and fetch
git rebase











